plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

writeSecrets("apiKeys.properties", "app/src/main/cpp/secrets.cpp")

android {
    compileSdk 31

    defaultConfig {

        applicationId "com.neo.marvelCharacters"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    viewBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {

    //ktx core
    implementation 'androidx.core:core-ktx:1.7.0'

    //ktx lifecycle
    implementation('androidx.lifecycle:lifecycle-runtime-ktx:2.4.1') {
        because("flow lifecycle aware")
    }

    //ktx activity
    implementation("androidx.activity:activity-ktx:1.4.0") {
        because("makes using the view model easier")
    }

    //layout
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    //dagger hilt
    def hilt_version = "2.41"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //retrofit
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //okhttp
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.3"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    //coil-kt
    implementation('io.coil-kt:coil:1.4.0') {
        because("makes loading images easier with kotlin")
    }

    //paging
    implementation('androidx.paging:paging-runtime:3.1.1') {
        because("makes paginations easier")
    }

    //facebook shimmer
    implementation('com.facebook.shimmer:shimmer:0.5.0') {
        because("makes create placeholders easier")
    }

    implementation "com.airbnb.android:lottie:3.4.0"

    //tests
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}


private Properties getApiKeyProperties(String filePath) {
    def apikeyProperties = new Properties()
    def apikeyPropertiesFile = rootProject.file(filePath)
    apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
    return apikeyProperties
}

private void writeSecrets(String propertiesPath, String filePath) {

    def apikeyProperties = getApiKeyProperties(propertiesPath)
    
    def secretsFile = rootProject.file(filePath)

    if (secretsFile.exists()) return

    def writer = new FileWriter(secretsFile)

    writer.write("#include <jni.h>\n")
    writer.write("\n")
    writer.write("extern \"C\"\n")
    writer.write("JNIEXPORT jstring JNICALL\n")
    writer.write("Java_com_neo_marvelCharacters_Secrets_getPublicKey(\n")
    writer.write("        JNIEnv *pEnv,\n")
    writer.write("        jobject pThis) {\n")
    writer.write(String.format("    return pEnv->NewStringUTF(%s);\n", apikeyProperties["PUBLIC_KEY"]))
    writer.write("}\n")
    writer.write("\n")
    writer.write("extern \"C\"\n")
    writer.write("JNIEXPORT jstring JNICALL\n")
    writer.write("Java_com_neo_marvelCharacters_Secrets_getSecretKey(\n")
    writer.write("        JNIEnv *pEnv,\n")
    writer.write("        jobject pThis) {\n")
    writer.write(String.format("    return pEnv->NewStringUTF(%s);\n", apikeyProperties["SECRET_KEY"]))
    writer.write("}\n")

    writer.close()
}